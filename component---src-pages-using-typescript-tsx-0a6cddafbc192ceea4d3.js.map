{"version":3,"file":"component---src-pages-using-typescript-tsx-0a6cddafbc192ceea4d3.js","mappings":"4JA6BA,IArBsC,SAAH,GAAsB,IAAhBA,EAAQ,EAARA,SACrC,GAA0CC,EAAAA,EAAAA,WAAS,GAA5CC,EAAa,KAAEC,EAAgB,KAEtC,OACE,gBAAC,WAAc,KACb,uBAAKC,UAAU,2DACb,gBAAC,KAAO,CACNF,cAAeA,EACfC,iBAAkB,kBAAMA,GAAkBD,EAAc,IAE1D,uBAAKE,UAAU,kCAAkCJ,IAEnD,uBAAKI,UAAU,6DACb,qBAAGA,UAAU,8BAA6B,6CAMpD,C,0ECcA,UA5BwD,SAAH,OAAMC,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAAI,OACnE,gBAAC,IAAM,KACL,gBAAC,IAAG,CAACC,MAAM,qBACX,0BAAI,0CACJ,yBAAG,4CACwC,0BAAI,YAAa,+DACd,0BAAI,eAAgB,wEAGlE,yBAAG,4CACwC,0BAAI,cAAe,oBACxD,0BAAI,cAAe,gBAAa,0BAAI,aAAc,UAExD,yBAAG,kCAC8BD,EAAK,uBAAqB,IACxDD,EAAKG,KAAKC,UAAU,KAEvB,yBAAG,kCAC+B,IAChC,qBAAGC,KAAK,6CAA4C,kCAEhD,KAGN,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAI,2BACN,C","sources":["webpack://gatsby-starter-default/./src/components/layout.tsx","webpack://gatsby-starter-default/./src/pages/using-typescript.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { Sidebar } from '../components';\n\ninterface LayoutProps {\n    children: React.ReactNode;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\n    const [sidebarIsOpen, setSidebarIsOpen] = useState(false);\n\n    return (\n      <React.Fragment>\n        <div className=\"bg-gray-100 relative min-h-screen md:flex font-OpenSans\">\n          <Sidebar\n            sidebarIsOpen={sidebarIsOpen}\n            setSidebarIsOpen={() => setSidebarIsOpen(!sidebarIsOpen)}\n          />\n          <div className=\"flex-1 min-h-screen py-8 px-10\">{children}</div>\n        </div>\n        <div className=\"w-full h-12 bottom-0 inset-x-0 bg-white flex items-center\">\n          <p className=\"mx-auto text-sm font-light\">\n            &#169; 2021 - Made with passion, using Gatsby\n          </p>\n        </div>\n      </React.Fragment>\n    );\n};\n\nexport default Layout;","// If you don't want to use TypeScript you can delete this file!\r\nimport * as React from \"react\"\r\nimport { PageProps, Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\ntype DataProps = {\r\n  site: {\r\n    buildTime: string\r\n  }\r\n}\r\n\r\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({ data, path }) => (\r\n  <Layout>\r\n    <Seo title=\"Using TypeScript\" />\r\n    <h1>Gatsby supports TypeScript by default!</h1>\r\n    <p>\r\n      This means that you can create and write <em>.ts/.tsx</em> files for your\r\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\r\n      (like gatsby-node.js) currently don't support TypeScript yet.\r\n    </p>\r\n    <p>\r\n      For type checking you'll want to install <em>typescript</em> via npm and\r\n      run <em>tsc --init</em> to create a <em>.tsconfig</em> file.\r\n    </p>\r\n    <p>\r\n      You're currently on the page \"{path}\" which was built on{\" \"}\r\n      {data.site.buildTime}.\r\n    </p>\r\n    <p>\r\n      To learn more, head over to our{\" \"}\r\n      <a href=\"https://www.gatsbyjs.com/docs/typescript/\">\r\n        documentation about TypeScript\r\n      </a>\r\n      .\r\n    </p>\r\n    <Link to=\"/\">Go back to the homepage</Link>\r\n  </Layout>\r\n)\r\n\r\nexport default UsingTypescript\r\n\r\nexport const query = graphql`\r\n  {\r\n    site {\r\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\r\n    }\r\n  }\r\n`\r\n"],"names":["children","useState","sidebarIsOpen","setSidebarIsOpen","className","data","path","title","site","buildTime","href","Link","to"],"sourceRoot":""}